"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Mic, MicOff, Copy, ExternalLink, Check } from "lucide-react"

export default function NewSession() {
  const [isRecording, setIsRecording] = useState(false)
  const [sessionText, setSessionText] = useState("")
  const [isSubmitted, setIsSubmitted] = useState(false)
  const [copied, setCopied] = useState(false)

  // Mock student summaries that would be generated by AI
  const studentSummaries = [
    {
      name: "John B.",
      domain: "Speech",
      summary:
        "Worked on /s/ sounds in sentences. Showed improvement with 80% accuracy on final position /s/. Used minimal verbal prompts.",
    },
    {
      name: "Sarah L.",
      domain: "Speech",
      summary:
        "Practiced /s/ blends. Struggled with /sp/ combinations (40% accuracy). Needs continued support with visual cues.",
    },
    {
      name: "Emma T.",
      domain: "Language",
      summary: "Followed 2-step directions with 90% accuracy. Great progress from previous session.",
    },
  ]

  const handleRecordToggle = () => {
    setIsRecording(!isRecording)
    // In a real app, this would start/stop voice recording
    if (isRecording) {
      // Simulate receiving transcribed text
      const existingText = sessionText
      const newText =
        existingText +
        (existingText ? "\n\n" : "") +
        "Group session focused on /s/ sounds. John worked on final position /s/ words and did well. " +
        "Sarah practiced /s/ blends but struggled with /sp/ combinations. " +
        "Emma joined for language work and followed directions well."
      setSessionText(newText)
    }
  }

  const handleSubmit = () => {
    if (sessionText.trim()) {
      setIsSubmitted(true)
    }
  }

  const handleCopy = () => {
    const text = studentSummaries.map((s) => `${s.name} (${s.domain}): ${s.summary}`).join("\n\n")
    navigator.clipboard.writeText(text)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      <h1 className="text-2xl font-bold">Log a Group Session</h1>

      {!isSubmitted ? (
        <>
          <Card>
            <CardHeader>
              <CardTitle>Session Details</CardTitle>
              <CardDescription>Record or type your session notes</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  onClick={handleRecordToggle}
                  variant={isRecording ? "destructive" : "default"}
                  className="w-full h-16"
                >
                  {isRecording ? (
                    <>
                      <MicOff className="mr-2 h-5 w-5" /> Stop Recording
                    </>
                  ) : (
                    <>
                      <Mic className="mr-2 h-5 w-5" /> Start Voice Recording
                    </>
                  )}
                </Button>

                <Textarea
                  placeholder="Paste or speak your session summary here..."
                  className="min-h-[200px]"
                  value={sessionText}
                  onChange={(e) => setSessionText(e.target.value)}
                />
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSubmit} className="w-full" disabled={!sessionText.trim()}>
                Submit Session
              </Button>
            </CardFooter>
          </Card>
        </>
      ) : (
        <Card>
          <CardHeader>
            <CardTitle>Session Summary</CardTitle>
            <CardDescription>AI-generated summaries for each student</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {studentSummaries.map((student, index) => (
                <Card key={index} className="bg-muted/50">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">{student.name}</CardTitle>
                    <CardDescription>{student.domain}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm">{student.summary}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
          <CardFooter className="flex flex-col sm:flex-row gap-2">
            <Button variant="outline" className="w-full sm:w-auto" onClick={handleCopy}>
              {copied ? (
                <>
                  <Check className="mr-2 h-4 w-4" /> Copied
                </>
              ) : (
                <>
                  <Copy className="mr-2 h-4 w-4" /> Copy Summary
                </>
              )}
            </Button>
            <Button className="w-full sm:w-auto">
              <ExternalLink className="mr-2 h-4 w-4" /> View in Google Sheet
            </Button>
          </CardFooter>
        </Card>
      )}
    </div>
  )
}

